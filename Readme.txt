#NLPL elm Frontend Experiment
I thought elm would be a great way to write the frontend for NLPL, and I got a little ways, but it turned out to be too difficult for now. I look forward to seeing Elm mature in the future, though. It's beta for a reason. I got stuck on the following:

* There's no quick way to generate a project skeleton for a new app (this is in the TODO list). New users are stuck trying to figure out the entire "Elm architecture" by feeling it out for themselves or copying an existing project and changing out pieces.
* It looks like web apps need lots of duplicate code, mainly for mapping actions in one module to actions in the module that uses them. For example, see the [`pages`](https://github.com/sircharleswatson/elm-architecture-hop/tree/master/src/elm/Pages) package in this elm Hop architecture example.
* Projects are still commonly set up with a ton of JavaScript/Node infrastructure (WebPack, etc.). If you don't know this ecosystem already, then you now have to learn two new ecosystems.
* Elm-Reactor doesn't play well with custom styles, so you can't develop your app while looking at it, which very slow. This is another community TODO.
* I never did quite get the hang of the syntax, particularly parentheses and commas. List(Token) was a list of Tokens, but Dict(String, Token) was a function that would take a value type and return a dictionary with (String, Token) for key types. Very frustrating. Parentheses are already difficult because I'm used to objects, so I always try myDict.keys(), which is wrong; it has to be Dict.keys(myDict). Or is that Dict.keys myDict? The parentheses seem to be sometimes required for correct grammar and sometimes ignored as a simple readability tool.
* Whitespace is required in certain places for the compiler to work correctly, but managing it yourself can be cumbersome; syntactic whitespace calls for an automatic formatter (also a community TODO). When the compiler says "I need whitespace to parse this correctly," I want to respond, "if you know you need it then add it yourself."
* The documentation is not quite thorough enough; there are plenty of tutorials on getting the basics, but not thorough documentation on the full syntax (like parens, whitespace, using type names as functions, etc.). This point makes sense, though, given that the language is still a moving target.
* The interface with JavaScript is very restrictive. Unfortunately the project I decided to copy to make my own (the Hop architecture one) happened to use Semantic.js, which does not go well in an Elm project; I was new to using Semantic as well, so I was unhappy to find that showing anything required calling JavaScript functions. Elm-Html doesn't allow you to just paste in a `<script>` element, as that would probably defeat the purpose of having a pure functional language, so Semantic.js was out. I tried Bootstrap next, but immediately found the exact same problem. There is a Bootstrap-Html package, but I searched and didn't find anything about popovers, so that was the end of that. (Sidenote: that package has Bootstrap.Html.Internal listed on it's documentation page; is there no way for authors to hide those, or did this author just not do that?).

Elm did deliver on a very important promise: once it compiled, it almost always worked correctly; when it didn't, it was usually because I forgot to hook something to a signal (that might be something the compiler can warn about). But combined between taking a long time to figure out syntax issues (mostly incorrect types due to wrong parentheses) and having to do manual reload after every edit, the development loop became far too long. Plus I was stymied in my attempt to use two popular CSS libraries, and I certainly don't plan to write my own styles.

So, this was a fun experiment. Since there doesn't seem to be any way to avoid becoming a JS developer anyway, I'll just start with James Shore's Automatopia skeleton, maybe try React, and see where things go from there.